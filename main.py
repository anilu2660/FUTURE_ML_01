# -*- coding: utf-8 -*-
"""Copy of Welcome to Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12BRG-vXUIknocAgtG6lWET0x7AVaJSkl
"""

# AI_Powered Sales  Forecasting Dashboard

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from google.colab import files

print("Importing necessary libraries and setting up environment...")

df = pd.read_csv('dataset.csv')
print("\nDataFrame loaded. First 5 rows:")
print(df.head())

df['Date'] = pd.to_datetime(df['Date'])

daily_sales = df.groupby('Date')['Total Amount'].sum().reset_index()
print("\nDaily sales aggregated. First 5 rows:")
print(daily_sales.head())

daily_sales.sort_values(by='Date', inplace=True)

data = daily_sales.copy()

data['year'] = data['Date'].dt.year
data['month'] = data['Date'].dt.month
data['day'] = data['Date'].dt.day
data['dayofweek'] = data['Date'].dt.dayofweek
data['weekofyear'] = data['Date'].dt.isocalendar().week.astype(int)

for lag in range(1, 8):
    data[f'sales_lag_{lag}'] = data['Total Amount'].shift(lag)

data['rolling_avg_7'] = data['Total Amount'].rolling(window=7).mean().shift(1)

data.dropna(inplace=True)

print("\nFeatures engineered. The new DataFrame has:")
print(data.info())
print(data.head())

features = [col for col in data.columns if col not in ['Date', 'Sales']]
X = data[features]
y = data['Total Amount']

train_size = len(X) - 90
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

print("\nData split into training and testing sets.")
print(f"Training set size: {len(X_train)} rows")
print(f"Testing set size: {len(X_test)} rows")

print("\nTraining the XGBoost model...")
model = XGBRegressor(objective='reg:squarederror', n_estimators=1000, learning_rate=0.05, n_jobs=-1)
model.fit(X_train, y_train,
          eval_set=[(X_train, y_train), (X_test, y_test)])

predictions = model.predict(X_test)
print("\nModel trained and predictions generated.")

import matplotlib.pyplot as plt
import seaborn as sns

print("\nPlotting results...")
plt.figure(figsize=(15, 7))
plt.plot(data['Date'].iloc[train_size:], y_test, label='Actual Sales', color='blue')
plt.plot(data['Date'].iloc[train_size:], predictions, label='Predicted Sales', color='red', linestyle='--')
plt.title('Actual vs. Predicted Sales')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.legend()
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 10))
sns.scatterplot(x=y_test, y=predictions, alpha=0.6, color='purple')
sns.lineplot(x=[y_test.min(), y_test.max()], y=[y_test.min(), y_test.max()], color='red', linestyle='--', linewidth=2)
plt.title('Scatter Plot: Actual vs. Predicted Sales', fontsize=16)
plt.xlabel('Actual Sales', fontsize=12)
plt.ylabel('Predicted Sales', fontsize=12)
plt.grid(True)
plt.show()

residuals = y_test - predictions
plt.figure(figsize=(10, 7))
sns.scatterplot(x=predictions, y=residuals, alpha=0.6, color='green')
plt.axhline(y=0, color='red', linestyle='--', linewidth=2)
plt.title('Residual Plot', fontsize=16)
plt.xlabel('Predicted Sales', fontsize=12)
plt.ylabel('Residuals (Actual - Predicted)', fontsize=12)
plt.grid(True)
plt.show()

plt.figure(figsize=(12, 8))
feature_importances = pd.Series(model.feature_importances_, index=features).sort_values(ascending=False)
sns.barplot(x=feature_importances, y=feature_importances.index, palette='viridis')
plt.title('Feature Importances from XGBoost Model', fontsize=16)
plt.xlabel('Importance', fontsize=12)
plt.ylabel('Feature', fontsize=12)
plt.show()

forecast_df = pd.DataFrame({
    'Date': data['Date'].iloc[train_size:],
    'Actual_Sales': y_test,
    'Predicted_Sales': predictions
})

print("\nForecasts ready. Saving to a CSV file...")
output_filename = 'sales_forecast_predictions.csv'
forecast_df.to_csv(output_filename, index=False)

print(f"File '{output_filename}' saved. You can download it from the left-hand file pane or by running the next command.")

files.download(output_filename)

print("\nScript finished. The file has been downloaded.")



from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
import numpy as np

mse = mean_squared_error(y_test, predictions)
mae = mean_absolute_error(y_test, predictions)
r2 = r2_score(y_test, predictions)

print(f"\nMean Squared Error (MSE): {mse:.2f}")
print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"R-squared (R2): {r2:.2f}")


tolerance = 0.10 * y_test
accurate_predictions = np.abs(y_test - predictions) <= tolerance
accuracy_within_tolerance = np.mean(accurate_predictions) * 100

print(f"Accuracy within 10% tolerance: {accuracy_within_tolerance:.2f}%")
print("\nActual Sales:")
print(y_test)
print("\nPredicted Sales:")
print(predictions)